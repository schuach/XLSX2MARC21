#+TITLE: Erstellung von MARC21 für die Handschriften der UBG
#+OPTIONS: ^:nil


* Vorbemerkungen
  Dieses Projekt wird in dieser Datei (=handschriften.org=) verwaltet. Alles
  außer den Ausgangsdaten wird aus dieser Datei mithilfe von =org-babel= und den
  literate programming-Funktionalitäten von Emacs bzw. =org-mode= exportiert. D.
  h. dass die resultierende Datei =handschriften_sosa.py= wahrscheinlich nicht
  sehr gut leserlich und sicher nicht PEP8-konform ist. Ich bitte dafür um
  Entschuldigung.

*** Dateien in diesem Ordner
    #+BEGIN_EXAMPLE
      .
      ├── output
      │   ├── errors.txt                        [nicht verarbeitete Zeilen]
      │   └── handschriften.xml                 [das resultierende MARCXML]
      ├── sourcefiles
      │   ├── 0-600.csv                         [Ausgangsdaten]
      │   ├── 1201-1800.csv                     [Ausgangsdaten]
      │   ├── 1801-Ende.csv                     [Ausgangsdaten]
      │   ├── 601-1200.csv                      [Ausgangsdaten]
      │   ├── Namensansetzung_Kern_Alma.csv     [Ansetzungsformen und GND-IDs Personen]
      │   └── vb_kor.csv                        [Ansetzungsformen und GND-IDs Körperschaften]
      ├── handschriften.html                    [HTML-Export dieser Datei]
      ├── handschriften.org                     [diese Datei]
      └── handschriften_sosa.py                 [das aus dieser Datei exportierte Python-Script]
    #+END_EXAMPLE

           
* Ausgangsdaten
  Die Daten sind in dieser Excel-Datei zu finden:

  [[file:MS-ALMA_Stand_final.xlsx]]

  Um es für die BearbeiterInnen übersichtlich zu halten, wurden eigene Sheets
  für jeweils 600 Signaturen angelegt. Jedes dieser Sheets wird als CSV
  gespeichert (einfach mit "speichern unter") um die Verarbeitung zu
  vereinfachen. Der Aufwand, xlsx mit Python einzulesen zahlt sich nicht aus.


* Jahrhundertangaben
  [[file:Addendum%20zu%20r%C3%B6mische%20Jahrhundert%20Angaben.docx]]

  Addendum zu römische Jahrhundert Angaben:

  Das Jahrhundert beginnt immer mit dem Jahr xxx1
	XII = 1101 – 1200
	XIII = 1201 – 1300
  für 008: XV = 1401

  Hälften:
  1.Hälfte 	XII/1 = 1101 – 1150
  XIII/1 = 1201 – 1150
  2.Hälfte	XII/2 = 1151 – 1200
  XIII/2 = 1251-1300
  für 008: XIII/2 = 1251

  Anfang: ersten zwei Dekaden
	Anfang XII = 1101 – 1120
	Anfang XIII = 1201 – 1220
  für 008: Anfang XII = 1101

  Ende: letzten zwei Dekaden
	Ende XII = 1181 – 1200
	Ende XII = 1281 – 1300
	Für 008: Ende XII = 1281

  Mitte: zwei Dekanden
	Mitte XII = 1141 – 1160
	Mitte XIII = 1141 - 1260
  Für 008: Mitte XII = 1151

  vor: minus eine Dekade
	vor 1254	1244 – 1254

  nach: plus eine Dekade
	nach 1254	1254 – 1256

  ca. plus fünf Jahre, minus fünf Jahre
	ca. 1254	1249 - 1259

  um wie ca.
* Verarbeitung
*** Imports, globals
    #+NAME: imports
    #+BEGIN_SRC python
      import csv
      from pymarc_helpers import *
      from pymarc import Record, Field
      import datetime
      import re
      from sys import argv

      part1 = "sourcefiles/0-600.csv"
      part2 = "sourcefiles/601-1200.csv"
      part3 = "sourcefiles/1201-1800.csv"
      part4 = "sourcefiles/1801-Ende.csv"

      # output nur schreiben wenn write_out als kommandozeilenargument gegeben wird
      write_output = False
      if len(argv) > 1:
          if argv[1] == "write_out":
              write_output = True
    #+END_SRC

    Zur Erklärung:

    =part1=, =part2= etc. sind die Dateinamen der einzelnen Input-Files. Jede
    dieser Dateien entspricht einem Sheet in der ursprünglichen Excel-Datei. Ich
    habe sie deshalb nicht zu einem CSV zusammengesetzt, weil hier und da
    Datenkorrekturen an einzelnen Sheets gemacht wurden und ich nicht immer alle
    neu als CSV-abspeichern wollte.

    Die Prüfung auf =write_output= dient dazu, zu steuern, ob das Script eben
    das MARC-File schreibt oder nicht. Beim interaktiven herumspielen brauche
    ich das nicht jedes mal.

*** Das CSV importieren
    Importiere das CSV und gebe eine Liste mit einem orderedDict pro Reihe aus.

    #+NAME: csv_to_list
    #+BEGIN_SRC python
      def csv_to_list(filename):
          """Read a csv file and return a list of dicts (one per line)"""

          rows = []
          with open(filename, newline='') as csvfile:
              reader = csv.DictReader(csvfile, delimiter="\t")
              for row in reader:
                  if "*" in row["Signatur modern"]:
                      continue
                  else:
                      rows.append(row)

          return rows

    #+END_SRC
*** Funktion: create_record()
    Die Hauptarbeit findet in der Funktion =create_record()= statt. Diese nimmt
    eine Zeile aus dem CSV (orderedDict) engegen und gibt ein
    pymarc.Record-Objekt zurück.

***** DONE 245
      CLOSED: [2018-08-08 Mit 13:01]
      UBG Ms {signatur modern}

      Wenn "Bd." nicht "":
      UBG Ms {signatur modern}/{Bd.}

      #+NAME: create 245
      #+BEGIN_SRC python
        # generiere Inhalt für 245
        if not row['Signatur modern']:
            return "Keine Signatur vorhanden"
        else:
            if row["Bd."]:
                val245 = f"UBG Ms {row['Signatur modern'].strip()}/{row['Bd.'].strip()}"
            else:
                val245 = f"UBG Ms {row['Signatur modern'].strip()}"

            rec.add_ordered_field(
                Field(
                    tag = '245',
                    indicators = ['0', '0'],
                    subfields = ['a', val245]))

      #+END_SRC
***** DONE UBG als besitzende Institution eintragen
      CLOSED: [2018-10-15 Mon 09:26]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-10-15 Mon 09:26]
      :END:
      - own :: gegenwärtige EingentümerIn
      #+NAME: own
      #+BEGIN_SRC python
        rec.add_field(
            Field(
                tag = "710",
                indicators = ["2", " "],
                subfields = ["a", "Universitätsbibliothek Graz", "0", "(DE-588)18018-X", "4", "own"]
            ))
      #+END_SRC 
***** DONE Leader
      CLOSED: [2018-11-29 Do 16:19]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-11-29 Do 16:19]
      :END:
      - LDR/06=t für handschriftliches Sprachmaterial. Wenn Noten vorliegen,
        muss das dann ausgebessert werden.
      - Katalogisierungslevel LDR/17=5 für Teillevel (vorläufig) - muss dann beim
        Katalogisieren ausgebessert werden.
      #+NAME: leader
      #+BEGIN_SRC python
      rec.leader = "00000ntm#a22000005c#4500"
      #+END_SRC
******* DONE Prüfen, ob Alma beim Import Datensatzlänge etc. einträgt.
        CLOSED: [2018-11-29 Do 16:19]
        :LOGBOOK:
        - State "DONE"       from "TODO"       [2018-11-29 Do 16:19] \\
          Tut es nicht, sollte aber egal sein.
        :END:
***** DONE Beschreibstoff
      CLOSED: [2018-11-29 Do 17:05]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-11-29 Do 17:05]
      :END:
      Für Books gibt es in 007 keinen Code für physical medium, daher wird der
      Text unverändert übernommen. Umso besser, dann muss nichts geprüft werden.
      #+NAME: beschreibstoff
      #+BEGIN_SRC python
        beschreibstoff = row["Beschreibstoff"].strip()
        rec.add_ordered_field(
            Field(
                tag = "340",
                indicators = [" ", " "],
                subfields = ["a", beschreibstoff])
        )
      #+END_SRC
***** DONE 008
      CLOSED: [2018-11-29 Do 16:48]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-11-29 Do 16:48]
      :END:
      171013|2014####gw############|||#|#ger#u
      - [X] 00-05: Date entered on file
      - [X] 06: s
      - [X] 07-10: date_008()
      - [X] 11-14: "    "
      - [X] 15-17: Code für unbekannt
      - [X] 18-21: "||||"
      - [X] 22: "|"
      - [X] 23: " "
      - [X] 24-27: "||||"
      - [X] 28: " "
      - [X] 29: "0"
      - [X] 30: "0"
      - [X] 31: "|"
      - [X] 32: "|"
      - [X] 33: "|"
      - [X] 34: "|"
      - [X] 35-37: "   "
      - [X] 38: "|"
      - [X] 39: "|"
      #+NAME: create 008
      #+BEGIN_SRC python
                date_on_file = datetime.datetime.now().strftime("%y%m%d")
                data008 = date_on_file + "s" + year + "    " + "xx " + "||||"  "|" + " " + "||||" + " 00||||   ||"
                rec.add_ordered_field(
                    Field(tag = "008",
                          data = data008)
                )
      #+END_SRC
***** DONE 500 mit Stand
      CLOSED: [2018-11-29 Do 08:21]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-11-29 Do 08:21]
      :END:
      #+NAME: stand in 500
      #+BEGIN_SRC python
        rec.add_ordered_field(
            Field(
                tag = "500",
                indicators = [" ", " "],
                subfields = ["a", "Stand 2018"])
        )
      #+END_SRC
***** DONE Fußnote mit alter Signatur
      - [X] In 500 mit Präfix "Historische Signatur der Universitätsbibliothek Graz: XXXXX"

        #+NAME: alte signatur in 500
        #+BEGIN_SRC python
          if row["Signatur alt"]:
              rec.add_field(
                  Field(
                      tag = '500',
                      indicators = [' ', ' '],
                      subfields = ['a', f'Historische Signatur der Universitätsbibliothek Graz: {row["Signatur alt"].strip()}'])
              )
        #+END_SRC
***** DONE Vorbesitzer eintragen
      CLOSED: [2018-11-30 Fr 16:23]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-11-30 Fr 16:23]
      :END:
      - fmo :: frühere EingentümerIn
******* DONE Körperschaften
        CLOSED: [2018-11-30 Fr 16:23]
        :LOGBOOK:
        - State "DONE"       from "TODO"       [2018-11-30 Fr 16:23]
        :END:
        #+NAME: kor dict
        #+BEGIN_SRC python
          vb_kor = {}
          with open("sourcefiles/vb_kor.csv") as csvfile:
              reader = csv.reader(csvfile, delimiter='\t')
              for row in reader:
                  vb_kor[row[0].strip()] = ['a', row[1].strip(), '0', row[2].strip()]
        #+END_SRC

        #+NAME: vorbesitzende koerperschaften
        #+BEGIN_SRC python
          vorbes_kor = []
          if row["1. Vorbesitz Institution"] != '':
              vorbes_kor.append(row["1. Vorbesitz Institution"].strip())
          if row["2. Vorbesitz Institution"] != '':
              vorbes_kor.append(row["2. Vorbesitz Institution"].strip())

          if len(vorbes_kor) > 0:
              for kor in vorbes_kor:
                  if kor not in vb_kor:
                      korfield = Field(
                          tag = '710',
                          indicators = ['2', ' '],
                          subfields = ['a', kor, '4', 'fmo'])
                      rec.add_ordered_field(korfield)
                      print(korfield)
                  else:
                      korfield = Field(
                          tag = '710',
                          indicators = ['2', ' '],
                          subfields = vb_kor[kor] + ['4', 'fmo'])
                      rec.add_ordered_field(korfield)
        #+END_SRC
******* DONE Personen
        CLOSED: [2018-11-29 Do 16:09]
        :LOGBOOK:
        - State "DONE"       from "TODO"       [2018-11-29 Do 16:09]
        :END:
********* DONE Dictionary bauen
          CLOSED: [2018-11-29 Do 16:09]
          :LOGBOOK:
          - State "DONE"       from "TODO"       [2018-11-29 Do 16:09]
          :END:
          Zuerst wird das dict gebaut (im globalen Namespace)
          #+NAME: name dict
          #+BEGIN_SRC python
            vb_pers = {}
            with open("sourcefiles/Namensansetzung_Kern_Alma.csv") as csvfile:
                reader = csv.reader(csvfile, delimiter='\t')
                for row in reader:
                    vb_pers[row[0].strip()] = ['a', row[1].strip(), 'c', row[2].strip(), '0', row[3].strip()]
          #+END_SRC
********* DONE Personen in ein Feld schreiben
          CLOSED: [2018-11-29 Do 16:08]
          :LOGBOOK:
          - State "DONE"       from "TODO"       [2018-11-29 Do 16:08]
          :END:
          #+NAME: vorbesitzende personen
          #+BEGIN_SRC python
            vorbes_nat_pers = []
            if row["1. VB natürl. Personen"] != '':
                vorbes_nat_pers.append(row["1. VB natürl. Personen"].strip())
            if row["2. VB natürl. Personen"] != '':
                vorbes_nat_pers.append(row["2. VB natürl. Personen"].strip())

            if len(vorbes_nat_pers) > 0:
                for pers in vorbes_nat_pers:
                    if pers not in vb_pers:
                        print(f"Person nicht vorhanden: {pers}")
                        continue
                    else:
                        persfield = Field(
                            tag = '700',
                            indicators = ['1', ' '],
                            subfields = vb_pers[pers] + ['4', 'fmo'])
                        if "," not in vb_pers[pers][1]:
                            persfield.indicators = ['0', ' ']
                        rec.add_ordered_field(persfield)
          #+END_SRC
***** DONE 300
      CLOSED: [2018-11-29 Do 17:14]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-11-29 Do 17:14]
      - State "TODO"       from "DONE"       [2018-11-29 Do 17:09]
      :END:
      - [X] sf a: =f"{Umfang} Blätter"=
      - [X] sf c: =f"{row["Format"].strip()}, {row["Größe h : b "].strip().replace(":", "x")}"=
      
      #+NAME: create 300
      #+BEGIN_SRC python
        # Umfangsangabe in 300
        if "rolle" in row["Umfang"].lower():
            sfa = row["Umfang"].strip()
        else:
            sfa = f'{row["Umfang"].strip()} Blätter'

        sfc = f'{row["Format"].strip()}, {row["Größe h : b   "].strip().replace(":", "x")}'

        if sfa.startswith(" "):
            sfa = ""
        if sfc.startswith(", "):
            sfc = sfc[2:]
        if sfc.endswith(", "):
            sfc = sfc[:-2]
        rec.add_ordered_field(
            Field(
                tag = '300',
                indicators = [' ', ' '],
                subfields = ["a", sfa, "c", sfc]))
      #+END_SRC
***** DONE Jahreszahl
      CLOSED: [2018-10-19 Fre 09:38]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-10-19 Fre 09:38]
      :END:
      Das Erstellen der Jahreszahl ist nicht trivial, weil es sehr heterogene
      Angaben etc. gibt. Zuerst müssen wir einmal zu einem Datum kommen. Das
      machen wir mit der Funktion =get_date()=:

      
      #+NAME: get date
      #+BEGIN_SRC python
        def get_date(row):
            """Return the raw date for 264 $$c and 008"""
            data = None

            if row["1. Dat. exakt"].strip():
                data = row["1. Dat. exakt"].strip()
            elif row["1. Dat. Ex. Von - bis"].strip():
                data = row["1. Dat. Ex. Von - bis"].strip()
            elif row['1. Dat. ca., um, vor, Anfang, Ende'].strip():
                data = row['1. Dat. ca., um, vor, Anfang, Ende'].strip()
            elif row["1. Dat. Jh. "].strip():
                data = row["1. Dat. Jh. "].strip()
            else:
                data = "Datum unbekannt"

            return data
      #+END_SRC

******* Für 264
        Für 264 können wir nehmen, was da ist, wenn etwas da ist:
        #+NAME: date 264
        #+BEGIN_SRC python
          rec.add_ordered_field(
              pymarc.Field(
                  tag = "264",
                  indicators = [" ", "1"],
                  subfields = ["c", f"[{get_date(row)}]"]))
        #+END_SRC
        
        
******* Für 008
        In 008 müssen wir das Datum, das wir haben, in einen vierstellige Zahl
        umwandeln.

        Sollten wir nicht schon ein passendes Datum haben, brauchen wir ein
        Mapping für Jahrhundertangaben etc.:

        #+NAME: mapping datierung
        #+BEGIN_SRC python
          map_dates_008 = {
              "VI": "501",
              "IX/1": "801",
              "Mitte IX": "851",
              "Ende IX": "881",
              "Anfang X": "901",
              "Mitte X": "951",
              "Ende X": "981",
              "X": "901",
              "X/1": "901",
              "X/2": "951",
              "Anfang XI": "1001",
              "Mitte XI": "1051",
              "Ende XI": "1081",
              "XI": "1051",
              "XI/1": "1001",
              "XI/2": "1051",
              "Anfang XII": "1101",
              "Mitte XII": "1151",
              "Ende XII": "1181",
              "XII": "1151",
              "XII/1": "1101",
              "XII/2": "1151",
              "Anfang XIII": "1201",
              "Mitte XIII": "1251",
              "Ende XIII": "1281",
              "XIII": "1251",
              "XIII/1": "1201",
              "XIII/2": "1251",
              "Anfang XIV": "1301",
              "Mitte XIV": "1351",
              "Ende XIV": "1381",
              "Spätes XIV": "1381",
              "XIV": "1351",
              "XIV/1": "1301",
              "XIV/2": "1351",
              "Anfang XV": "1401",
              "Erstes Viertel XV": "1401",
              "Mitte XV": "1451",
              "Nach Mitte XV": "1451",
              "Ende XV": "1481",
              "XV": "1451",
              "XV/1": "1401",
              "XV/2": "1451",
              "Anfang XVI": "1501",
              "Mitte XVI": "1551",
              "Ende XVI": "1581",
              "XVI": "1551",
              "XVI/1": "1501",
              "XVI/2": "1551",
              "Anfang XVII": "1601",
              "Mitte XVII": "1651",
              "Ende XVII": "1681",
              "XVII": "1651",
              "XVII/1": "1601",
              "XVII/2": "1651",
              "Anfang XVIII": "1701",
              "Vor Mitte XVIII": "1701",
              "Mitte XVIII": "1751",
              "Ende XVIII": "1781",
              "XVIII": "1751",
              "XVIII/1": "1701",
              "XVIII/2": "1751",
              "Mitte XIX": "1851",
              "XIX": "1801",
              "XIX/1": "1801",
              "XIX/2": "1851",
          }
        #+END_SRC

        Dann erarbeiten wir uns das Datum mittels der Funktion =date_008()=:
        #+NAME: date 008
        #+BEGIN_SRC python
          def date_008(date):
              year = None
              if date in map_dates_008.keys():
                  year = map_dates_008[date].zfill(4)
              else:
                  re_match = re.search(r'\d{3}\d?', date)
                  if re_match is not None:
                      year = re_match.group(0).strip().zfill(4)
              return year
        #+END_SRC
***** DONE Bestand
      CLOSED: [2018-10-19 Fre 09:52]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2018-10-19 Fre 09:52]
      :END:
      - [X] Standort
      - [X] Signatur
        - [X] Präfix: "Ms "
      - [X] Historische Signatur in alt call nr
      - [X] =$$9LOCAL=, damit das Feld, mit dem der Bestand erstellt wird, nicht
        in die Verbunddatenbank eingespielt wird

      #+NAME: bestand
      #+BEGIN_SRC python
        standort = "SSHS"
        signatur = "Ms " + row["Signatur modern"]

        rec.add_field(
            Field(
                tag = "995",
                indicators = [" ", " "],
                subfields = ["b", "BHB", 
                             "c", standort,
                             "h", signatur,
                             "a", row["Signatur alt"],
                             "9", "LOCAL"
                             ]
            ))

      #+END_SRC
        
***** Die ganze Funktion
      #+NAME: create_record
      #+BEGIN_SRC python :noweb yes
        def create_record(row):
            """Take a  row from the csv dict and return a pymarc.Record"""
            rec = Record()
            <<leader>>
            rec.add_ordered_field(
                pymarc.Field(
                    tag = "005",
                    data = datetime.datetime.now().strftime("%Y%m%d%H%M%S.0")
                ))
            <<create 245>>
            <<create 300>>
            <<alte signatur in 500>>
            <<stand in 500>>
            <<beschreibstoff>>
            <<date 264>>
            <<create 591>>
            <<own>>
            date = get_date(row)

            if date == "Datum unbekannt":
                print("Kein Datum vorhanden: " + val245)
                return f"{val245}: Kein Datum vorhanden"
            else:
                year = date_008(date)
                if year is None:
                    print("Keine Jahreszahl für 008 extrahierbar: " + val245)
                    return f"{val245}: Keine Jahreszahl für 008 extrahierbar."

            <<create 008>>
            <<vorbesitzende personen>>
            <<vorbesitzende koerperschaften>>
            <<bestand>>
            return rec
      #+END_SRC
*** Zusammensetzen aller Teile
    #+NAME: 
    #+BEGIN_SRC python :noweb yes :tangle handschriften_sosa.py
      <<imports>>
      <<csv_to_list>>
      <<name dict>>
      <<kor dict>>
      <<get date>>
      <<create_record>>
      <<mapping datierung>>
      <<date 008>>


      d1 = csv_to_list(part1)
      d2 = csv_to_list(part2)
      d3 = csv_to_list(part3)
      d4 = csv_to_list(part4)
      r = d1[0]

      rows = []
      errors = []
      outlist = []

      for d in (d1, d2, d3, d4):
          for row in d:
              rows.append(row)

      for row in rows:
          rec = create_record(row)
          if type(rec) is pymarc.record.Record:
              outlist.append(rec)
          else:
              errors.append(rec)

      if write_output:
          write_to_file(outlist, "output/handschriften", "xml")

          with open("output/errors.txt", "w") as fh:
              for error in errors:
                  fh.write(error + "\n")
    #+END_SRC
  
    
